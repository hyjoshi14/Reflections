One file was working one was not. Since both versions were saved, it is
easier to compare sections of the files where there are differences using diff.
Once the differences have been identified, isolating the part that could
be an error is very simple. I did not use diff. I used FC on windows.

How could having easy access to the entire history of a file make you a
more efficient programmer in the long term?

It will make me an efficient programmer as instead of debugging my code
I could restore it to a point where it was working and salvage it from
there.

Manually choosing when to commit reduces versions for a file if done after
a logical change has been made to the file which can be easily understood.
However, the downside is the responsibility on the user. There may arise
situations where someone would forget to commit. But, if the work can be broken
down into sizable chunks and then committed this issue can be resolved.

Allowing to save changes on multiple files in one commit ensures that if there
were changes made to every file owing to their interrelatedness it can be captured.

git log
git log --stat
git diff id1 id2

I always have a commit to go back to.

initializing a repository helps me track all changes made to a file thus in
version control. it stores all metadata about the file in a folder called .git.
using git init i initialize a repository. git status helps me check the status
of the files. git log returns an error as no commit has been made by me upon
initializing.
